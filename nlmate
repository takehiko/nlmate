#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require "optparse"
require "fileutils"
require "open3"
require "timeout"
require "logger"
require "singleton"

Version = "0.0.2a"

module Nlmate
  class GameMaster
    #### constructor ####
    def initialize(h)
      @variation = h[:variation] || rand(1024)
      @offset_i = @offset_j = 0
      @swap_ij = true
      @use_smaller = false
      @workdir = h[:workdir] || File.expand_path("~/.nlmate")
      @level_from = h[:from] || 1
      @level_to = h[:to] || 3
      @print_playtime = h[:playtime].nil? ? !(@level_from == 1 && @level_to == 1) : h[:playtime]
      @level = -1
      @question = nil
      @goal = nil
      @line1 = @line2 = ""
      @file_execute = "answer"
      @command_compile = "gcc -o #{@file_execute} #{@file_execute}.c"
      @command_execute = "./#{@file_execute}"
      @compile_error = false
      @result = ""
      @result_byte_max = 100
      @readline_ready = nil
      @log = nil
      @stime_game = nil
      @stime_answer = nil
      @etime_answer = nil
      @count_question = 0
      @count_answer = 0

      create_dir
      setup_readline
      setup_logger
    end

    #### public methods ####
    def start
      print_question  if $DEBUG

      max_level = QuestionManager.instance.max_level
      @level_to = max_level  if @level_to == -1
      if @level_from <= 0 || @level_from > max_level ||
          @level_to <= 0 || @level_to > max_level ||
          @level_from > @level_to
        puts "Invalid level."
        return
      end

      @level_from.upto(@level_to) do |lv|
        @level = lv
        play_game
      end
      exit_game
    end

    #### private mathods ####
    private

    def create_dir(lv = nil)
      unless test(?d, @workdir)
        FileUtils.mkdir(@workdir)
      end
      if lv
        @dir_level = "#{@workdir}/#{lv}"
        if test(?d, @dir_level)
          FileUtils.rm_r(@dir_level)
        end
        FileUtils.mkdir(@dir_level)
      end
    end

    def setup_readline
      begin
        eval('require "readline"', TOPLEVEL_BINDING)
        @readline_ready = true
      rescue LoadError
        @readline_ready = false
        puts "Warning: GNU Readline is disabled."
      end
    end

    def setup_logger
      @log = Logger.new("#{@workdir}/nlmate.log")
      @log.level = Logger::DEBUG
      add_log_start
      @stime_game = Time.now
    end

    def add_log_start
      @log.info("start; ruby_platform=#{RUBY_PLATFORM}; ruby_version=#{RUBY_VERSION}; nlmate_version=#{Version}; variation=#{@variation}")
    end

    def add_log_answer(time, status)
      @log.info("level=#{@level}; goal=#{@goal}; answer=#{@line1} #{@line2}; result=#{status}; time=#{time}")
    end

    def add_log_end(time)
      @log.info("end; count_q=#{@count_question}; count_a=#{@count_answer}; time=#{time}")
    end

    def print_question
      QuestionManager.instance.print_question
    end

    def print_tutorial
      @question.print_tutorial(@readline_ready, @use_smaller)
    end

    def give_question
      if @question.nil?
        @question = Question.new(@level, @variation)
        @goal = @question.goal
        @result_byte_max = [@goal.size * 2, 100].max
        @count_question += 1
      end
      print_tutorial  if @level == 1
      puts "[Level #{@level}]"
      puts "Goal: #{@goal}"
    end

    def get_line(prompt)
      loop do
        if @readline_ready
          line = Readline.readline(prompt, true)
        else
          print prompt
          $stdout.flush
          line = $stdin.gets
        end
        case line
        when /^\s*quit/i
          exit_game("Aborted.")
        when /^\s*for/
          if line.index("for") == line.rindex("for")
            return line.chomp
          end
          puts "Invalid statement (Do not write \"for\" more than once)."
        else
          puts "Invalid statement (Initial token should be \"for\")."
        end
      end
    end

    def time_to_s(t)
      t.to_s.sub(/\.(\d{3}).+$/, ".\\1")
    end

    def exit_game(message = nil)
      puts message  unless message.nil?

      if @question
        @etime_answer = Time.now
        add_log_answer(time_to_s(@etime_answer - @stime_answer), "q")
      end

      time_s = time_to_s(Time.now - @stime_game)
      puts "Play time: #{time_s} sec."  if @print_playtime
      add_log_end(time_s)
      exit
    end

    def get_lines
      @line1 = get_line("Outer loop: ")
      @line2 = get_line("Inner loop:   ")
    end

    def print_hairline
      puts("=" * 40)
    end

    def compile_and_execute
      @compile_error = false
      @result = ""

      create_dir(@level)
      Dir.chdir(@dir_level) do
        open("answer.c", "w") do |f_out|
          src = <<EOS
#include <stdio.h>

int main(void)
{
  int i = 123, j = 456;

  #{@line1}
    #{@line2}
      printf("(%d,%d),", i, j);

  return 0;
}
EOS
          f_out.print src
          print_hairline
          print src
          print_hairline
        end

        message_out = ""
        message_err = ""
        Open3.popen3(@command_compile) do |stdin, stdout, stderr|
          stdin.close
          message_out = stdout.read
          message_err = stderr.read
        end
        if !message_err.empty?
          puts message_err
          open("compile_stderr", "w") do |f_err|
            f_err.print message_err
            print_hairline
          end
        end
        unless test(?f, @file_execute)
          @compile_error = true
          return
        end

        @result = ""
        flag_timeout = false
        Open3.popen3(@command_execute) do |stdin, stdout, stderr|
          begin
            timeout(5) do
              stdin.close
              @result = stdout.read(@result_byte_max) || ""
            end
          rescue Timeout::Error
            stdout.flush
            @result = stdout.read(@result_byte_max) || ""
            flag_timeout = true
          end
        end
        @result.chomp!
        if @result.empty?
          @result = "(no output)"
        elsif @result.size >= @result_byte_max
          @result = @result[0, @result_byte_max] + " ..."
        end
        if flag_timeout
          @result += " (time out)"
        end
      end
    end

    def correct_answer?
      @count_answer += 1

      if @compile_error
        result_status = "err"
      elsif @result != @goal
        result_status = "ng"
      else
        result_status = "ok"
      end
      add_log_answer(time_to_s(@etime_answer - @stime_answer), result_status)

      if @compile_error
        puts "Compile error occurred.... Let's start fresh!"
        puts
        return false
      end

      puts "Output: #{@result}"
      puts "Goal:   #{@goal}"

      if @result != @goal
        puts "Wrong.... Try again!"
        puts
        return false
      end

      puts "Correct!"
      puts
      true
    end

    def play_game
      loop do
        @line1 = @line2 = ""
        give_question
        @stime_answer = Time.now
        get_lines
        @etime_answer = Time.now
        compile_and_execute
        break  if correct_answer?
      end
      @question = nil
    end
  end

  class QuestionManager
    include Singleton

    #### constructor ####
    def initialize
      q0 = [
            ["000102101112202122"],
            ["001011202122",
             "000102111222"],
            ["000102101120",
             "021112202122"],
            ["020100121110222120",
             "001110222120",
             "020100121122",
             "020100111020",
             "021211222120"],
            ["000111122223",
             "010210112/20"],
            ["000111122021",
             "010210112122",
             "0001111222",
             "0102101120"],
            ["00022022"],
            ["0002112022",
             "01101221"],
            ["000102121110202122"]
           ]
      @question_array = q0.map {|q_a|
        q_a.map {|line|
          line.scan(/../).map {|ij|
            i = ij[0, 1].ord - '0'.ord
            j = ij[1, 1].ord - '0'.ord
            [i, j]
          }
        }
      }
    end

    #### public methods ####
    def max_level
      @question_array.size
    end

    def fetch(level)
      raise  if level <= 0 || level > max_level
      q1 = @question_array[level - 1]
      if q1.size == 1
        q1.first
      else
        q1[rand(q1.size)]
      end
    end

    def print_question
      require "pp"
      PP.pp @question_array
      PP.pp @question_array.map {|q_a|
        q_a.map {|array|
          Question.goal_to_str(array)
        }
      }
    end
  end

  class Question
    #### class methods ####
    def self.goal_to_str(array)
      array.map {|i, j| "(#{i},#{j})"}.join(",") + ","
    end

    #### constructor ####
    def initialize(level = 1, variation = 0)
      @level = level
      @variation = variation

      setup_variation

      @q = QuestionManager.instance.fetch(level)
      @q.map! {|ij|
        i, j = ij
        i, j = j, i  if @swap_ij
        i += @offset_i
        j += @offset_j
        [i, j]
      }
      @goal = goal_to_str
    end
    attr_reader :level, :variation, :goal

    #### public methods ####
    def goal_to_str
      self.class.goal_to_str(@q)
    end

    def print_tutorial(readline_ready = false, use_smaller = false)
      puts "Warning: The answer may not be correct."  if @level != 1
      line1 = "for (i = #{@q[0][0]}; i <= #{@q[-1][0]}; i++)"
      line2 = "for (j = #{@q[0][1]}; j <= #{@q[-1][1]}; j++)"
      if @swap_ij
        line1, line2 = line2, line1
      end
      if use_smaller
        line1.sub!(/<= (\d)/) {"< #{$1.to_i + 1}"}
        line2.sub!(/<= (\d)/) {"< #{$1.to_i + 1}"}
      end
      puts <<EOS
[Tutorial]
"nlmate" is a game for you to solve the nested loop mating problem,
just like the Shogi mating problem (a.k.a. Tsume-Shogi).

Your task is typing in two "for statements" which work as 
the nested loop to conform to the goal sequence. After the entry, 
the fixed codes surround and enclose your instructions and the 
source file is automatically compiled to decide if the output is 
the same as the goal.

The input which begins with the word other than "for" is not 
allowed, except that you may "quit" to stop playing the game.

All you have to do for the first task is punch in
"#{line1}"
and
"#{line2}"
respectively before hitting Enter key.

EOS
      if readline_ready
        Readline::HISTORY << line1
        Readline::HISTORY << line2
      end
    end

    #### private mathods ####
    private

    def setup_variation
      variation1, variation2 = @variation.divmod(128)
      @swap_ij = (variation1 == 7)
      @offset_i = @offset_j = 0
      if variation2 == 127
        @offset_i = 1
        @offset_j = 0
      elsif variation2 == 126
        @offset_i = 0
        @offset_j = 1
      elsif variation2 >= 100
        @offset_i = 1
        @offset_j = 1
      end
    end
  end
end

unless String.instance_methods.include?(:ord)
  class String
    def ord
      self[0]
    end
  end
end

if __FILE__ == $0
  h = {}
  opt = OptionParser.new
  opt.on("-0", "--tutorial", "Tutorial mode (Level 1 only)") {
    h[:variation] = 0
    h[:from] = h[:to] = 1
  }
  opt.on("--beginner", "Beginner mode (up to Level 3, default)") {
    h[:from] = 1
    h[:to] = 3
  }
  opt.on("--kaikin", "Kaikin mode (up to Level 9)") {
    h[:from] = 1
    h[:to] = 9
  }
  opt.on("-d VAL", "--dir=VAL", "Working directory") {|v|
    h[:workdir] = v
  }
  opt.on("-v VAL", "--var=VAL", "Value for variation") {|v|
    h[:variation] = v.to_i
  }
  opt.on("-l VAL", "--level=VAL", "Fixed level") {|v|
    h[:from] = h[:to] = v.to_i
  }
  opt.on("--from=VAL", "Start level") {|v|
    h[:from] = v.to_i
  }
  opt.on("--to=VAL", "End level") {|v|
    h[:to] = v.to_i
  }
  opt.on("--[no-]playtime", "Print play time") {|v|
    h[:playtime] = v
  }
  opt.parse!(ARGV)

  Nlmate::GameMaster.new(h).start
end
